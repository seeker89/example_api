// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [Account]
            Decoders.addDecoder(clazz: [Account].self) { (source: AnyObject) -> [Account] in
                return Decoders.decode(clazz: [Account].self, source: source)
            }
			// Decoder for Account
            Decoders.addDecoder(clazz: Account.self) { (source: AnyObject) -> Account in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Account()
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.ownerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ownerId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


			// Decoder for [AccountID]
            Decoders.addDecoder(clazz: [AccountID].self) { (source: AnyObject) -> [AccountID] in
                return Decoders.decode(clazz: [AccountID].self, source: source)
            }
			// Decoder for AccountID
            Decoders.addDecoder(clazz: AccountID.self) { (source: AnyObject) -> AccountID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccountID()
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                return instance
            }


			// Decoder for [CreateAccountRequest]
            Decoders.addDecoder(clazz: [CreateAccountRequest].self) { (source: AnyObject) -> [CreateAccountRequest] in
                return Decoders.decode(clazz: [CreateAccountRequest].self, source: source)
            }
			// Decoder for CreateAccountRequest
            Decoders.addDecoder(clazz: CreateAccountRequest.self) { (source: AnyObject) -> CreateAccountRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateAccountRequest()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.customer = Decoders.decodeOptional(clazz: CustomerID.self, source: sourceDictionary["customer"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


			// Decoder for [CreateCustomerRequest]
            Decoders.addDecoder(clazz: [CreateCustomerRequest].self) { (source: AnyObject) -> [CreateCustomerRequest] in
                return Decoders.decode(clazz: [CreateCustomerRequest].self, source: source)
            }
			// Decoder for CreateCustomerRequest
            Decoders.addDecoder(clazz: CreateCustomerRequest.self) { (source: AnyObject) -> CreateCustomerRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateCustomerRequest()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


			// Decoder for [CreateTransferRequest]
            Decoders.addDecoder(clazz: [CreateTransferRequest].self) { (source: AnyObject) -> [CreateTransferRequest] in
                return Decoders.decode(clazz: [CreateTransferRequest].self, source: source)
            }
			// Decoder for CreateTransferRequest
            Decoders.addDecoder(clazz: CreateTransferRequest.self) { (source: AnyObject) -> CreateTransferRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateTransferRequest()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.origin = Decoders.decodeOptional(clazz: AccountID.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: AccountID.self, source: sourceDictionary["destination"])
                return instance
            }


			// Decoder for [Customer]
            Decoders.addDecoder(clazz: [Customer].self) { (source: AnyObject) -> [Customer] in
                return Decoders.decode(clazz: [Customer].self, source: source)
            }
			// Decoder for Customer
            Decoders.addDecoder(clazz: Customer.self) { (source: AnyObject) -> Customer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Customer()
                instance.created = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.accounts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["accounts"])
                return instance
            }


			// Decoder for [CustomerID]
            Decoders.addDecoder(clazz: [CustomerID].self) { (source: AnyObject) -> [CustomerID] in
                return Decoders.decode(clazz: [CustomerID].self, source: source)
            }
			// Decoder for CustomerID
            Decoders.addDecoder(clazz: CustomerID.self) { (source: AnyObject) -> CustomerID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomerID()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


			// Decoder for [ResponseError]
            Decoders.addDecoder(clazz: [ResponseError].self) { (source: AnyObject) -> [ResponseError] in
                return Decoders.decode(clazz: [ResponseError].self, source: source)
            }
			// Decoder for ResponseError
            Decoders.addDecoder(clazz: ResponseError.self) { (source: AnyObject) -> ResponseError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                return instance
            }


			// Decoder for [Stats]
            Decoders.addDecoder(clazz: [Stats].self) { (source: AnyObject) -> [Stats] in
                return Decoders.decode(clazz: [Stats].self, source: source)
            }
			// Decoder for Stats
            Decoders.addDecoder(clazz: Stats.self) { (source: AnyObject) -> Stats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Stats()
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.startup = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startup"])
                instance.uptime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["uptime"])
                return instance
            }


			// Decoder for [Transaction]
            Decoders.addDecoder(clazz: [Transaction].self) { (source: AnyObject) -> [Transaction] in
                return Decoders.decode(clazz: [Transaction].self, source: source)
            }
			// Decoder for Transaction
            Decoders.addDecoder(clazz: Transaction.self) { (source: AnyObject) -> Transaction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Transaction()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.origin = Decoders.decodeOptional(clazz: AccountID.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: AccountID.self, source: sourceDictionary["destination"])
                instance.executedAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["executedAt"])
                return instance
            }


			// Decoder for [TransactionArray]
            Decoders.addDecoder(clazz: [TransactionArray].self) { (source: AnyObject) -> [TransactionArray] in
                return Decoders.decode(clazz: [TransactionArray].self, source: source)
            }
			// Decoder for TransactionArray
            Decoders.addDecoder(clazz: TransactionArray.self) { (source: AnyObject) -> TransactionArray in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionArray()
                instance.transactions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["transactions"])
                return instance
            }
        }
    }
}
